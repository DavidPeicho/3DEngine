#include <GL/gl.h>
static const GLchar *shader_source_deferred_fs[] = {
    "#version 330 core\n"
    "out vec4 FragColor;\n"
    "in vec2 TexCoords;\n"
    "//uniform sampler2D position;\n"
    "uniform sampler2D normal;\n"
    "uniform sampler2D albedo;\n"
    "uniform sampler2D depth;\n"
    "struct Light {\n"
    "  vec3 Position;\n"
    "  vec3 Color;\n"
    "  float Linear;\n"
    "  float Quadratic;\n"
    "  float Radius;\n"
    "};\n"
    "const int MAX_LIGHTS = 32;\n"
    "uniform Light lights[MAX_LIGHTS];\n"
    "uniform vec3 viewPos;\n"
    "uniform mat4 view;\n"
    "uniform mat4 projection;\n"
    "vec3 getViewPositionFromDepth(float depth)\n"
    "{\n"
    "    depth = (depth * 2.0) - 1.0;\n"
    "    vec2 ndc = (TexCoords * 2.0) - 1.0;\n"
    "    vec4 pos = vec4(ndc, depth, 1.0);\n"
    "    mat4 matInvProj = inverse(projection * view);\n"
    "    pos = matInvProj * pos;\n"
    "    return vec3(pos.xyz / pos.w);\n"
    "}\n"
    "void main()\n"
    "{\n"
    "  // gBuffer\n"
    "  //vec3 FragPos = texture(position, TexCoords).rgb;\n"
    "  float d = texture(depth, TexCoords).r;\n"
    "  vec3 FragPos = getViewPositionFromDepth(d);\n"
    "  vec3 Normal = texture(normal, TexCoords).rgb;\n"
    "  vec3 Diffuse = texture(albedo, TexCoords).rgb;\n"
    "  float Specular = texture(albedo, TexCoords).a;\n"
    "  // Lighting\n"
    "  vec3 lighting  = Diffuse * 0.1; // Ambient lighting\n"
    "  vec3 viewDir  = normalize(viewPos - FragPos);\n"
    "  for(int i = 0; i < MAX_LIGHTS; ++i)\n"
    "  {\n"
    "    // Calculate distance between light source and current fragment\n"
    "    float distance = length(lights[i].Position - FragPos);\n"
    "    if(distance < lights[i].Radius)\n"
    "    {\n"
    "      // Diffuse\n"
    "      vec3 lightDir = normalize(lights[i].Position - FragPos);\n"
    "      vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * lights[i].Color;\n"
    "      // Specular\n"
    "      vec3 halfwayDir = normalize(lightDir + viewDir);\n"
    "      float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);\n"
    "      vec3 specular = lights[i].Color * spec * Specular;\n"
    "      // Attenuation\n"
    "      float attenuation = 1.0 / (1.0 + lights[i].Linear * distance + lights[i].Quadratic * distance * distance);\n"
    "      diffuse *= attenuation;\n"
    "      specular *= attenuation;\n"
    "      lighting += diffuse + specular;\n"
    "    }\n"
    "  }\n"
    "  FragColor = vec4(lighting, 1.0);\n"
    "  //FragColor = vec4(d, d, d, 1.0);\n"
    "}\n"
};
